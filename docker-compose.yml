services:
  # Databases
  sql-server:
    build:
      context: ./sql-server
      dockerfile: Dockerfile
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_PASSWORD}
      - MSSQL_PID=Express
      - TrustServerCertificate=true
      - MSSQL_TOOLS_ACCEPT_EULA=Y
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${DB_PASSWORD}" -Q "SELECT 1" || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    ports:
      - "1433:1433"
    env_file:
      - .env
    networks:
      - microservices-network

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - microservices-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - microservices-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
      - RABBITMQ_ERLANG_COOKIE='unique-cookie-value'
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    user: rabbitmq
    restart: unless-stopped
    networks:
      - microservices-network

  # Microservices
  user-service:
    build:
      context: ./src/UserService
      dockerfile: Dockerfile
    ports:
      - "5001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__UserDb=Server=sql-server;Database=UserDb;User Id=sa;Password=${DB_PASSWORD};TrustServerCertificate=true;
    depends_on:
      sql-server:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:80/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - microservices-network

  order-service:
    build: ./src/OrderService
    ports:
      - "5004:80"
    environment:
      - ConnectionStrings__OrderDb=Server=sql-server;Database=OrderDb;User Id=sa;Password=${DB_PASSWORD};TrustServerCertificate=true;
      - ASPNETCORE_URLS=http://+:80
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=${RABBITMQ_USER}
      - RabbitMQ__Password=${RABBITMQ_PASS}
    depends_on:
      sql-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - microservices-network

  cart-service:
    build: ./src/CartService
    environment:
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - microservices-network

  product-service:
    build:
      context: ./src/ProductService
      dockerfile: Dockerfile
    ports:
      - "5002:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__ProductDb=mongodb://mongodb:27017
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - microservices-network

  notification-service:
    build: ./src/NotificationService
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=${RABBITMQ_USER}
      - RabbitMQ__Password=${RABBITMQ_PASS}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: on-failure:3
    networks:
      - microservices-network

  api-gateway:
    build: ./src/ApiGateway
    ports:
      - "8080:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      user-service:
        condition: service_healthy
      product-service:
        condition: service_started
      cart-service:
        condition: service_started
      order-service:
        condition: service_healthy
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

# Volumes for persistent data
volumes:
  mongodb_data:
  rabbitmq_data: